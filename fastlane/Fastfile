TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: true,
    default_keychain: true,
    timeout: 300,
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do    
  desc 'Generate ipa file'

  desc 'Fetch certificates and provisioning profiles'
  lane :certificates do
    match(app_identifier: 'com.ReleaseRNDemo.app', type: 'appstore', readonly: true, git_basic_authorization: Base64.strict_encode64(ENV["GIT_AUTHORIZATION"]))
  end

  lane :build_ios do
    certificates
    increment_build_number(xcodeproj: './ios/ReleaseRNDemo.xcodeproj')
    gym(
      clean: true,
      workspace: "./ios/ReleaseRNDemo.xcworkspace",
      scheme: "ReleaseRNDemo",
      output_directory: "./ios/",
      output_name: "ReleaseRNDemo.ipa",
      export_method: 'app-store',
      xcargs: "-allowProvisioningUpdates",
    )
  end

  lane :beta do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    build_ios

    delete_temp_keychain(keychain_name)
  end
end

platform :android do
  desc "Generate apk file"
  lane :build_android_dev do
    gradle(task: 'clean', project_dir: 'android/')
    # increment_version_code(
    #     gradle_file_path: "android/app/build.gradle",
    # )
    android_keystore(output_directory: "android/app")
    gradle(task: 'assemble', build_type: 'release', project_dir: 'android/', flavor: 'staging')
  end
end